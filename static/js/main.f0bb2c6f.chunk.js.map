{"version":3,"sources":["components/Word/Word.js","components/Words/Words.js","components/NavMenu/NavMenu.js","components/Phonemes/PhonemesList.js","components/Phonemes/Phonemes.js","App.js","serviceWorker.js","index.js"],"names":["Word","short","word","phonemics","handleOnMouseOver","e","document","querySelector","play","className","onClick","onMouseOver","hidden","id","controls","src","type","Words","words","isFilterActive","getKey","cuid","map","key","NavMenu","listOfItems","action","state","item","preventDefault","href","consonants","phonem","vowels","diphthongs","Phonemes","file","getPhonemList","items","newPhonem","includes","replace","App","useState","search","setSearch","menuItemSelected","setMenuItemSelected","handlePlayClick","timeout","querySelectorAll","forEach","audio","setTimeout","duration","getDescriptors","allDescriptors","db","wordDescriptors","descriptors","length","allWords","inputWords","split","filter","filtered","ordered","input","find","filteredItem","push","keyName","onKeyDown","focus","value","onChange","target","toLowerCase","placeholder","getFilteredWords","slice","knowledge","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0bb2c6f.chunk.js","sourcesContent":["import React from 'react';\nimport './Word.css';\n\nconst Word = ({short, word, phonemics}) => {\n    const handleOnMouseOver = (e) => {\n        document.querySelector(`#${word}`).play();\n    };\n\n    const getWord = () => short\n        ?   <span onMouseOver={handleOnMouseOver} onClick={handleOnMouseOver}>\n                <span className='word-name'> {word}</span>\n                <span className='word-phonemics'> ({phonemics})</span>\n            </span>\n        : <div>\n            <div>{word}</div>\n            <div>{phonemics}</div>\n        </div>;\n    \n    const getClassName = () => short ? 'short' : 'normal';\n\n    return <div className={getClassName()} onClick={handleOnMouseOver}>\n        {getWord()}\n        <audio hidden={short} id={word} controls>\n            <source src={`./audioFiles/${word}.mp3`} type=\"audio/mpeg\"></source>\n            Your browser does not support the audio element.\n        </audio>\n    </div>\n};\n\nexport default Word;","import React from 'react';\nimport Word from '../Word/Word.js';\nimport './Words.css';\nimport cuid from 'cuid';\n\nconst Words = ({words, isFilterActive}) => {\n    const getClassName = () => isFilterActive ? 'short' : 'normal';\n    const getKey = id => isFilterActive ? cuid() : id;\n\n    return <div className={`words-${getClassName()}`}>\n        {words.map(({word, phonemics}, id) => <Word short={isFilterActive} key={getKey(id)} word={word} phonemics={phonemics} />)}\n    </div>\n};\n\nexport default Words;","import React from 'react'\nimport './NavMenu.css';\n\nconst NavMenu = ({\n  listOfItems,\n  action,\n  state\n}) => (\n  <nav>\n    <ul \n      className=\"navList\"\n    >\n      {listOfItems.map((item) => (\n        <li\n          key={item}\n        >\n          <a\n            className={`link ${state === item ? 'active' : ''} `}\n            onClick={(e) => {\n              e.preventDefault()\n              action(item)\n            }}\n            href={item}\n          >\n            {item}\n          </a>\n        </li>\n      ))}\n    </ul>\n  </nav>\n)\n\nexport default NavMenu\n","export const consonants = [\n    {\n        phonem: 'p',\n        word: 'soup'\n    }, {\n        phonem: 'b',\n        word: 'bat'\n    },\n    {\n        phonem: 't',\n        word: 'light'\n    },\n    {\n        phonem: 'd',\n        word: 'dog'\n    },\n    {\n        phonem: 'k',\n        word: 'cap'\n    },\n    {\n        phonem: 'g',\n        word: 'bag'\n    },\n    {\n        phonem: 'm',\n        word: 'man'\n    },\n    {\n        phonem: 'n',\n        word: 'rain'\n    },\n    {\n        phonem: 'ŋ',\n        word: 'king'\n    },\n    {\n        phonem: 'f',\n        word: 'fish'\n    },\n    {\n        phonem: 'v',\n        word: 'van'\n    },\n    {\n        phonem: 'θ',\n        word: 'thumb'\n    },\n    {\n        phonem: 'ð',\n        word: 'mother'\n    },\n    {\n        phonem: 's',\n        word: 'mouse'\n    },\n    {\n        phonem: 'z',\n        word: 'zebra'\n    },\n    {\n        phonem: 'ʃ',\n        word: 'shoe'\n    },\n    {\n        phonem: 'ʒ',\n        word: 'television'\n    },\n    {\n        phonem: 'h',\n        word: 'hand'\n    },\n    {\n        phonem: 'tʃ',\n        word: 'cheese'\n    },\n    {\n        phonem: 'dʒ',\n        word: 'jet'\n    },\n    {\n        phonem: 'r',\n        word: 'write'\n    },\n    {\n        phonem: 'l',\n        word: 'long'\n    },\n    {\n        phonem: 'j',\n        word: 'yo-yo'\n    },\n    {\n        phonem: 'w',\n        word: 'whale'\n    }\n]\n\nexport const vowels = [\n    {\n        phonem: 'i:',\n        word: 'sea'\n    },\n    {\n        phonem: 'ɪ',\n        word: 'swim'\n    },\n    {\n        phonem: 'e',\n        word: 'bed'\n    },\n    {\n        phonem: 'æ',\n        word: 'cat'\n    },\n    {\n        phonem: 'ɑ:',\n        word: 'car'\n    },\n    {\n        phonem: 'ʌ',\n        word: 'cup'\n    },\n    {\n        phonem: 'ɒ',\n        word: 'lock'\n    },\n    {\n        phonem: 'ɔ:',\n        word: 'ball'\n    },\n    {\n        phonem: 'ʊ',\n        word: 'book'\n    },\n    {\n        phonem: 'u:',\n        word: 'two'\n    },\n    {\n        phonem: 'ɜ:ʳ',\n        word: 'shirt'\n    },\n    {\n        phonem: 'ə',\n        word: 'father'\n    }\n]\n\nexport const diphthongs = [\n    {\n        phonem: 'eɪ',\n        word: 'eight'\n    },\n    {\n        phonem: 'aɪ',\n        word: 'eye'\n    },\n    {\n        phonem: 'ɔɪ',\n        word: 'boy'\n    },\n    {\n        phonem: 'oʊ',\n        word: 'arrow'\n    },\n    {\n        phonem: 'aʊ',\n        word: 'house'\n    },\n    {\n        phonem: 'eəʳ',\n        word: 'chair'\n    },\n    {\n        phonem: 'ɪəʳ',\n        word: 'deer'\n    },\n    {\n        phonem: 'ʊə',\n        word: 'tourist'\n    },\n]","import React from 'react'\nimport './Phonemes.css';\nimport { consonants, vowels, diphthongs } from './PhonemesList.js';\n\nconst Phonemes = () =>{\n  const handleOnMouseOver = (e, file) => {\n    document.querySelector(`#${file}`).play();\n  };\n\n  const getPhonemList = (items, type) =>\n    <article className=\"phonemes-article\">\n      <p className=\"title\">{type}</p>\n      <div className={`phonemList ${type}`}>\n        {items.map(({ phonem, word }, id)=> {\n          const newPhonem = phonem.includes(':') ? phonem.replace(\":\", \"\\\\:\") : phonem\n          return (  \n          <div key={id} className=\"pair\">\n            <span \n              className=\"phonem\" \n              onMouseOver={(e)=>handleOnMouseOver(e, newPhonem)}\n              onClick={(e)=>handleOnMouseOver(e, newPhonem)}\n            >\n              {phonem}\n            </span>\n            <audio hidden={true} id={phonem} controls>\n              <source src={`./phonemesFiles/${phonem}.mp3`} type=\"audio/mpeg\"></source>\n              Your browser does not support the audio element.\n            </audio>\n            <span \n              className=\"phonem-word\"\n              onMouseOver={(e)=>handleOnMouseOver(e, word)}\n              onClick={(e)=>handleOnMouseOver(e, word)}\n            >\n              {word}\n            </span>\n            <audio hidden={true} id={word} controls>\n              <source src={`./phonemesFiles/${word}.mp3`} type=\"audio/mpeg\"></source>\n              Your browser does not support the audio element.\n            </audio>\n          </div>\n        )}\n        )}\n      </div>\n    </article>\n  \n  return <section className=\"phonemes-component-wrapper\">\n    <section className='phonemes-lists-wrapper'>\n      {getPhonemList(consonants, 'consonants')}\n      {getPhonemList(vowels, 'vowels')}\n      {getPhonemList(diphthongs, 'diphthongs')}\n    </section>\n  </section>\n}\n\nexport default Phonemes","import React, { useState } from 'react';\nimport './App.css';\nimport Words from './components/Words/Words.js';\nimport NavMenu from './components/NavMenu/NavMenu.js';\nimport Phonemes from './components/Phonemes/Phonemes.js';\nimport db from './utils/db/db.json';\nimport Hotkeys from 'react-hot-keys';\n\n// [ ] Ver como hacer para que se cacheen los audios, ya que seria una web bastante pesada\n// [ ] Limitar el numero de items que se pintan en pantalla a 200 o algo asi, o que se vayan pintando poco a poco\n// [x] Mejorar el aspecto y la usabilidad del texto buscado\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [menuItemSelected, setMenuItemSelected] = useState('text');\n\n  const leaveOnlyLetters = str => str.replace(/[^A-Za-z\\s]/g, '');\n  const handleChange = e => setSearch(leaveOnlyLetters(e.target.value.toLowerCase()));\n\n  const handleClearClick = () => setSearch('');\n  const handlePlayClick = () => {\n    if (isFilterActive()) {\n      let timeout = 0;\n\n      [...document.querySelector('.words-short').querySelectorAll('audio')].forEach(audio => {\n        setTimeout(() => {\n          audio.play();\n        }, timeout * 1000);\n        \n        timeout += audio.duration;\n      });\n    }\n  }\n\n  const getDescriptors = () => {\n    const allDescriptors = db.wordDescriptors\n      .map(item => ({ word: item.word, phonemics: item.phonemics }));\n      // .map(item => ({ word: item.word, phonemics: item.phonemics }))\n      // .slice(0, 40);\n\n    let descriptors = [allDescriptors];\n\n    if (search.length > 0) {\n      const allWords = allDescriptors.map(item => item.word);\n      const inputWords = search.split(' ').filter(item => !!item).filter(item => allWords.includes(item));\n      const filtered = allDescriptors.filter(item => inputWords.includes(item.word));\n      const ordered = inputWords.map(input => filtered.find(filteredItem => filteredItem.word === input));\n\n      descriptors.push(ordered);\n    }\n\n    return descriptors;\n  };\n\n  const isFilterActive = () => search.length > 0;\n\n  const getFilteredWords = () => {\n    if (isFilterActive()) {\n      return <Words words={getDescriptors()[1]} isFilterActive={isFilterActive()} />\n    }\n  }\n\n  const knowledge = 0;\n\n  const onKeyDown = (keyName) => {\n    const keyMap = {\n      // h for hunt (hunt a word, fun pun)\n      'Command+h': () => document.querySelector('input').focus(),\n      'alt+p': () => handlePlayClick(),\n    }\n\n    keyMap[keyName]();\n  };  \n\n  return (\n    <div className=\"App\">\n      <NavMenu \n        listOfItems={['phonemes', 'text']}\n        action={(item) => setMenuItemSelected(item)}\n        state={menuItemSelected}\n      />\n      { menuItemSelected === 'text' ? \n        <Hotkeys \n          keyName=\"Command+h,alt+p\" \n          onKeyDown={onKeyDown}\n        >\n          <input value={search} onChange={handleChange} placeholder='Command+h to focus' />\n          <button onClick={handlePlayClick}>Play Search (alt+p)</button>\n          <button onClick={handleClearClick}>Clear Search</button>\n          {getFilteredWords()}\n          <Words words={getDescriptors()[0].slice(knowledge, knowledge + 50)} hidden={isFilterActive()} />\n        </Hotkeys>\n        : \n        <Phonemes/>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}